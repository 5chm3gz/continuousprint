{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Continuous Print Queue Plugin Thanks for your interest in the OctoPrint Continuous Print plugin! For an overview, check out the plugin repository page . If you're looking for source code, head over to the github repository . Use the nav section on the left to learn more.","title":"Home"},{"location":"#continuous-print-queue-plugin","text":"Thanks for your interest in the OctoPrint Continuous Print plugin! For an overview, check out the plugin repository page . If you're looking for source code, head over to the github repository . Use the nav section on the left to learn more.","title":"Continuous Print Queue Plugin"},{"location":"advanced-queuing/","text":"Advanced Queuing In the quickstart we covered the basics of adding prints to the queue and running them, but you can do much more once you understand the nested structure of the print queue. Sets and Jobs The queue is actually made up of two levels: sets and jobs. Sets are a single print file, printed one or more times. You created a set by following the \"Add prints to the queue\" step in the quickstart . Jobs are a collection of sets, printed one or more times. Jobs are always printed sequentially, from the top of the queue to the bottom. \"Add\" behavior By default, every print file you add (as a set) is appended to a default, unnamed job at the end of the queue. If you give this job a name (by clicking the title box, typing a name, then hitting enter or clicking away) it will stop collecting new prints and a new default job will be created when the next print is added. Example 1: Batched strategy Let's consider an empty queue. If you add A.gcode with 5 copies and B.gcode with 5 copies, the print order will be: AAAAA BBBBB This is great if you want all of your A files to print before all your B files, for instance when you're working on a project that uses A but plan use B for something later. Example 2: Interleaved strategy Let's start again with an empty queue, but now suppose we add A.gcode with 1 copy, B.gcode with 1 copy, then set the job count to 5 . The print order will now be: AB AB AB AB AB This is exactly the pattern you would want if you were, for example, printing a box with A.gcode as the base and B.gcode as the lid. Each box would be completed in order, so you can use the first box without waiting for all the bases to print, then for the first lid to print. Example 3: Combined strategy From an empty queue, you could even add A.gcode with 1 copy and B.gcode with 4 copies, and set the job count to 3 . The outcome is then: ABBBB ABBBB ABBBB We're simply mixing examples 1 and 2 together, but this would be ideal for a base print with multiple smaller additions - a table with four legs, for instance. Drag and drop reordering At any time, you can click and drag jobs and sets with the grips on the left (the two vertical lines): Dragging a job reorders it among the jobs in the queue. Dragging a set reorders it within a job. Tip You can also drag a set from one job to another! Note however that this may change the total number of that file printed if the destination job has a different count than the origin job.","title":"Advanced Queuing"},{"location":"advanced-queuing/#advanced-queuing","text":"In the quickstart we covered the basics of adding prints to the queue and running them, but you can do much more once you understand the nested structure of the print queue.","title":"Advanced Queuing"},{"location":"advanced-queuing/#sets-and-jobs","text":"The queue is actually made up of two levels: sets and jobs. Sets are a single print file, printed one or more times. You created a set by following the \"Add prints to the queue\" step in the quickstart . Jobs are a collection of sets, printed one or more times. Jobs are always printed sequentially, from the top of the queue to the bottom.","title":"Sets and Jobs"},{"location":"advanced-queuing/#add-behavior","text":"By default, every print file you add (as a set) is appended to a default, unnamed job at the end of the queue. If you give this job a name (by clicking the title box, typing a name, then hitting enter or clicking away) it will stop collecting new prints and a new default job will be created when the next print is added.","title":"\"Add\" behavior"},{"location":"advanced-queuing/#example-1-batched-strategy","text":"Let's consider an empty queue. If you add A.gcode with 5 copies and B.gcode with 5 copies, the print order will be: AAAAA BBBBB This is great if you want all of your A files to print before all your B files, for instance when you're working on a project that uses A but plan use B for something later.","title":"Example 1: Batched strategy"},{"location":"advanced-queuing/#example-2-interleaved-strategy","text":"Let's start again with an empty queue, but now suppose we add A.gcode with 1 copy, B.gcode with 1 copy, then set the job count to 5 . The print order will now be: AB AB AB AB AB This is exactly the pattern you would want if you were, for example, printing a box with A.gcode as the base and B.gcode as the lid. Each box would be completed in order, so you can use the first box without waiting for all the bases to print, then for the first lid to print.","title":"Example 2: Interleaved strategy"},{"location":"advanced-queuing/#example-3-combined-strategy","text":"From an empty queue, you could even add A.gcode with 1 copy and B.gcode with 4 copies, and set the job count to 3 . The outcome is then: ABBBB ABBBB ABBBB We're simply mixing examples 1 and 2 together, but this would be ideal for a base print with multiple smaller additions - a table with four legs, for instance.","title":"Example 3: Combined strategy"},{"location":"advanced-queuing/#drag-and-drop-reordering","text":"At any time, you can click and drag jobs and sets with the grips on the left (the two vertical lines): Dragging a job reorders it among the jobs in the queue. Dragging a set reorders it within a job. Tip You can also drag a set from one job to another! Note however that this may change the total number of that file printed if the destination job has a different count than the origin job.","title":"Drag and drop reordering"},{"location":"api/","text":"Continuous Print API This plugin comes with a basic API to fetch state and start/stop the queue. This allows for other scripts and plugins to interact with the continuous print queue to unlock even more autonomous printing! Important Other internal web requests exist than what's presented here, but they aren't for external use and are not guaranteed to be stable. If you want additional API features, please submit a feature request . Tip: Usage Examples See api_examples/ for reference implementations in different languages. Fetch the queue state Request HTTP GET http://printer:5000/plugin/continuousprint/state Returns the current internal state of the printer as a JSON string. List entries within queue may include fields which are not listed here - those fields may be subject to change without notice, so be wary of depending on them. Response { \"active\": true/false, \"status\": string, \"queue\": [ { \"name\": string, \"path\": string, \"sd\": bool \"job\": string, \"run\": number \"start_ts\": null | number (seconds), \"end_ts\": null | number (seconds), \"result\": string (todo specific stirngs), \"retries\": number }, ... ] } Start/stop managing the queue Request HTTP POST http://printer:5000/plugin/continuousprint/set_active Payload: active=true or active=false This starts and stops continuous print management of the printer. Warning If active=false is sent, the plugin will stop managing the queue but it will not stop any currently active print . This must be done separately. See the OctoPrint REST API for additional print job management options which include cancelling active prints. Response Same as /state above","title":"API"},{"location":"api/#continuous-print-api","text":"This plugin comes with a basic API to fetch state and start/stop the queue. This allows for other scripts and plugins to interact with the continuous print queue to unlock even more autonomous printing! Important Other internal web requests exist than what's presented here, but they aren't for external use and are not guaranteed to be stable. If you want additional API features, please submit a feature request . Tip: Usage Examples See api_examples/ for reference implementations in different languages.","title":"Continuous Print API"},{"location":"api/#fetch-the-queue-state","text":"Request HTTP GET http://printer:5000/plugin/continuousprint/state Returns the current internal state of the printer as a JSON string. List entries within queue may include fields which are not listed here - those fields may be subject to change without notice, so be wary of depending on them. Response { \"active\": true/false, \"status\": string, \"queue\": [ { \"name\": string, \"path\": string, \"sd\": bool \"job\": string, \"run\": number \"start_ts\": null | number (seconds), \"end_ts\": null | number (seconds), \"result\": string (todo specific stirngs), \"retries\": number }, ... ] }","title":"Fetch the queue state"},{"location":"api/#startstop-managing-the-queue","text":"Request HTTP POST http://printer:5000/plugin/continuousprint/set_active Payload: active=true or active=false This starts and stops continuous print management of the printer. Warning If active=false is sent, the plugin will stop managing the queue but it will not stop any currently active print . This must be done separately. See the OctoPrint REST API for additional print job management options which include cancelling active prints. Response Same as /state above","title":"Start/stop managing the queue"},{"location":"contributing/","text":"Contributor Guide Based on the octoprint plugin quickstart guide 1. Install octoprint from source Install octoprint locally: git clone https://github.com/OctoPrint/OctoPrint cd OctoPrint virtualenv venv source venv/bin/activate pip install -e . 2. Install and start the continuous print plugin in local dev mode In the same terminal as the one where you activated the environment, Install the plugin in dev mode and launch the server: git clone https://github.com/smartin015/continuousprint.git cd continuousprint octoprint dev plugin:install pre-commit install # Cleans up files when you commit them - see https://pre-commit.com/. Note that venv must be activated or else flake8 raises improper errors octoprint serve You should see \"Successfully installed continuousprint\" when running the install command, and you can view the page at http://localhost:5000 . 3. Run unit tests to verify changes Backend unit tests are currently run manually: python3 continuousprint/print_queue_test.py python3 continuousprint/driver_test.py Frontend unit tests require some additional setup (make sure yarn and its dependencies are installed): cd .../continuousprint yarn install yarn run test This will run all frontend JS test files ( continuousprint/static/js/\\*.test.js ). You can also yarn run watch-test to set up a test process which re-runs whenever you save a JS test file. 4. Install a dev version on OctoPi Users of OctoPi can install a development version directly on their pi to test their changes on actual hardware. Warning Editing code - especially unfamiliar code - can lead to unpredictable behavior. You're controlling a robot that can pinch fingers and melt plastic, so be careful and consider using the built-in virtual printer before a physical test. ssh pi@<your octopi hostname> and provide your password (the default is raspberry , but for security reasons you should change it with passwd when you can) git clone https://github.com/smartin015/continuousprint.git Uninstall any existing continuous print installations (see Settings -> Plugin Manager in the browser) cd continuousprint && ~/oprint/bin/python3 setup.py install Note that we're using the bundled version of python3 that comes with octoprint, NOT the system installed python3. If you try the latter, it'll give an error that sounds like octoprint isn't installed. Tips and Tricks This is a collection of random tidbits intended to help you get your bearings. If you're new to this plugin (and/or plugin development in general), please take a look! The backend ( __init__.py and dependencies) stores a flattened representation of the print queue and iterates through it from beginning to end. Each item is loaded as a QueueItem (see print_queue.py ). The frontend talks to the backend with the flattened queue, but operates on an inmemory structured version: Each flattened queue item is loaded as a CPQueueItem (see continuousprint/static/js/continuousprint_queueitem.js) Sets of the same queue item are aggregated into a CPQueueSet (see continuousprint/static/js/continuousprint_queueset.js) Multiple queuesets are grouped together and run one or more times as a CPJob (see continuousprint/static/js/continuousprint_job.js) For simplicity, each level only understands the level below it - e.g. a Job doesn't care about QueueItems. Octoprint currently uses https://fontawesome.com/v5.15/icons/ for icons. Drag-and-drop functionality uses SortableJS wrapped with Knockout-SortableJS, both of which are heavily customized. For more details on changes see: Applied fix from https://github.com/SortableJS/knockout-sortablejs/pull/13 Applied fix from https://github.com/SortableJS/knockout-sortablejs/issues/14 Discussion at https://github.com/smartin015/continuousprint/issues/14 (conflict with a different knockout-sortable library)","title":"Contributing"},{"location":"contributing/#contributor-guide","text":"Based on the octoprint plugin quickstart guide","title":"Contributor Guide"},{"location":"contributing/#1-install-octoprint-from-source","text":"Install octoprint locally: git clone https://github.com/OctoPrint/OctoPrint cd OctoPrint virtualenv venv source venv/bin/activate pip install -e .","title":"1. Install octoprint from source"},{"location":"contributing/#2-install-and-start-the-continuous-print-plugin-in-local-dev-mode","text":"In the same terminal as the one where you activated the environment, Install the plugin in dev mode and launch the server: git clone https://github.com/smartin015/continuousprint.git cd continuousprint octoprint dev plugin:install pre-commit install # Cleans up files when you commit them - see https://pre-commit.com/. Note that venv must be activated or else flake8 raises improper errors octoprint serve You should see \"Successfully installed continuousprint\" when running the install command, and you can view the page at http://localhost:5000 .","title":"2. Install and start the continuous print plugin in local dev mode"},{"location":"contributing/#3-run-unit-tests-to-verify-changes","text":"Backend unit tests are currently run manually: python3 continuousprint/print_queue_test.py python3 continuousprint/driver_test.py Frontend unit tests require some additional setup (make sure yarn and its dependencies are installed): cd .../continuousprint yarn install yarn run test This will run all frontend JS test files ( continuousprint/static/js/\\*.test.js ). You can also yarn run watch-test to set up a test process which re-runs whenever you save a JS test file.","title":"3. Run unit tests to verify changes"},{"location":"contributing/#4-install-a-dev-version-on-octopi","text":"Users of OctoPi can install a development version directly on their pi to test their changes on actual hardware. Warning Editing code - especially unfamiliar code - can lead to unpredictable behavior. You're controlling a robot that can pinch fingers and melt plastic, so be careful and consider using the built-in virtual printer before a physical test. ssh pi@<your octopi hostname> and provide your password (the default is raspberry , but for security reasons you should change it with passwd when you can) git clone https://github.com/smartin015/continuousprint.git Uninstall any existing continuous print installations (see Settings -> Plugin Manager in the browser) cd continuousprint && ~/oprint/bin/python3 setup.py install Note that we're using the bundled version of python3 that comes with octoprint, NOT the system installed python3. If you try the latter, it'll give an error that sounds like octoprint isn't installed.","title":"4. Install a dev version on OctoPi"},{"location":"contributing/#tips-and-tricks","text":"This is a collection of random tidbits intended to help you get your bearings. If you're new to this plugin (and/or plugin development in general), please take a look! The backend ( __init__.py and dependencies) stores a flattened representation of the print queue and iterates through it from beginning to end. Each item is loaded as a QueueItem (see print_queue.py ). The frontend talks to the backend with the flattened queue, but operates on an inmemory structured version: Each flattened queue item is loaded as a CPQueueItem (see continuousprint/static/js/continuousprint_queueitem.js) Sets of the same queue item are aggregated into a CPQueueSet (see continuousprint/static/js/continuousprint_queueset.js) Multiple queuesets are grouped together and run one or more times as a CPJob (see continuousprint/static/js/continuousprint_job.js) For simplicity, each level only understands the level below it - e.g. a Job doesn't care about QueueItems. Octoprint currently uses https://fontawesome.com/v5.15/icons/ for icons. Drag-and-drop functionality uses SortableJS wrapped with Knockout-SortableJS, both of which are heavily customized. For more details on changes see: Applied fix from https://github.com/SortableJS/knockout-sortablejs/pull/13 Applied fix from https://github.com/SortableJS/knockout-sortablejs/issues/14 Discussion at https://github.com/smartin015/continuousprint/issues/14 (conflict with a different knockout-sortable library)","title":"Tips and Tricks"},{"location":"getting-started/","text":"Getting Started Install the plugin In the OctoPrint UI, go to Settings -> Plugin Manager -> Get More Search for \"Continuous Print\", and click Install, following any instructions If you can't find the plugin, you can also put https://github.com/smartin015/continuousprint/archive/master.zip into the \"...from URL\" section of the Get More page. Restart OctoPrint That's it! Now let's configure it to work with your printer. Want cool features? There's much more automation on the way ! To help speed up development and get features early (and if you don't mind the odd bug here and there), turn on Release Candidates under Settings -> Software Update (more info here ) Configure the plugin Go to Settings -> Continuous Print and ensure the bed cleaning and queue finished scripts are correct for your 3D printer. You can also enable settings here for compatibility with The Spaghetti Detective for automatic retries when the print starts failing. Add prints to the queue Navigate to the file you wish to add in the Files dialog on the left of the page. Add it to the print queue by clicking the + button to the right of the file name. If you want to print more than one, you can click multiple times to add more copies, or set a specific count in the Continuous Print tab. Use Jobs to group your print files The queue is actually made up of two levels: sets and jobs. Sets are a single print file, printed one or more times. You created a set by following the \"Add prints to the queue\" step above. Jobs are a collection of sets, printed one or more times. By default, every print file you add (as a set) is appended to a default, unnamed job at the end of the queue. If you give this job a name (by clicking the title box, typing a name, then hitting enter or clicking away) it will stop collecting new prints and a new default job will be created Example 1: Batched Let's consider an empty queue. If you add A.gcode with 5 copies and B.gcode with 5 copies, the print order will be: A A A A A B B B B B This is great if you want all of your A files to print before all your B files, e.g. if you're working on a project that uses A but plan use B for something later. Example 2: Interleaved Let's start again with an empty queue, but now suppose we add A.gcode with 1 copy, B.gcode with 1 copy, then set the job count to 5 . The print order will now be: A B A B A B A B A B This is exactly the pattern you would want if you were, for example, printing a box with A.gcode as the base and B.gcode as the lid. Each box would be completed in order, so you can use the first box without waiting for all the bases to print, then for the first lid to print. You can mix and match Start the queue Safety check! If you glossed over \"Configure the plugin\" above, read it now. Seriously. You can permanently damage your printer if you don't set up the correct GCODE instructions to a clear the bed and finish the queue. Supporting specific printer profiles is on the to-do list , but not yet available, so you'll have to do this on your own for now. The print queue won't start your prints just yet. To run the queue: Click the 'Continuous Print` tab (it may be hidden in the extra tabs fold-out on the right) Double check the order and count of your prints - set the count and order using the buttons and number box to the right of the queued print, and delete with the red X . Click Start Managing . The plugin will wait until your printer is ready to start a print, then it'll begin with the top of the queue and proceed until the bottom. Note that when it's time to clear the print bed or finish up, a temporary cp\\_\\*.gcode file will appear in your local files, and disappear when it completes. This is a change from older \"gcode injecting\" behavior that is necessary to support at-commands in the clearing and finish scripts. Inspect queue items As the print queue is managed and prints complete, you can see the status of individual prints by clicking the small triangle to the left of any individual queue item. This opens a sub-panel showing individual print stats and results. Stop the queue When all prints are finished, the plugin stops managing the queue and waits for you to start it again. If you need to stop early, click Stop Managing . Important The queue may not be managed any more, but any currently running print will continue printing unless you cancel it with the Cancel button. Clean up the queue Click the triple-dot menu in the top right corner of the plugin tab for several convenient queue cleanup options. You can also remove individual queue items with the red X next to the item. Troubleshooting If at any point you're stuck or see unexpected behavior or bugs, please file a bug report . Be sure to include system info and browser logs so the problem can be quickly diagnosed and fixed.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#install-the-plugin","text":"In the OctoPrint UI, go to Settings -> Plugin Manager -> Get More Search for \"Continuous Print\", and click Install, following any instructions If you can't find the plugin, you can also put https://github.com/smartin015/continuousprint/archive/master.zip into the \"...from URL\" section of the Get More page. Restart OctoPrint That's it! Now let's configure it to work with your printer. Want cool features? There's much more automation on the way ! To help speed up development and get features early (and if you don't mind the odd bug here and there), turn on Release Candidates under Settings -> Software Update (more info here )","title":"Install the plugin"},{"location":"getting-started/#configure-the-plugin","text":"Go to Settings -> Continuous Print and ensure the bed cleaning and queue finished scripts are correct for your 3D printer. You can also enable settings here for compatibility with The Spaghetti Detective for automatic retries when the print starts failing.","title":"Configure the plugin"},{"location":"getting-started/#add-prints-to-the-queue","text":"Navigate to the file you wish to add in the Files dialog on the left of the page. Add it to the print queue by clicking the + button to the right of the file name. If you want to print more than one, you can click multiple times to add more copies, or set a specific count in the Continuous Print tab.","title":"Add prints to the queue"},{"location":"getting-started/#use-jobs-to-group-your-print-files","text":"The queue is actually made up of two levels: sets and jobs. Sets are a single print file, printed one or more times. You created a set by following the \"Add prints to the queue\" step above. Jobs are a collection of sets, printed one or more times. By default, every print file you add (as a set) is appended to a default, unnamed job at the end of the queue. If you give this job a name (by clicking the title box, typing a name, then hitting enter or clicking away) it will stop collecting new prints and a new default job will be created Example 1: Batched Let's consider an empty queue. If you add A.gcode with 5 copies and B.gcode with 5 copies, the print order will be: A A A A A B B B B B This is great if you want all of your A files to print before all your B files, e.g. if you're working on a project that uses A but plan use B for something later. Example 2: Interleaved Let's start again with an empty queue, but now suppose we add A.gcode with 1 copy, B.gcode with 1 copy, then set the job count to 5 . The print order will now be: A B A B A B A B A B This is exactly the pattern you would want if you were, for example, printing a box with A.gcode as the base and B.gcode as the lid. Each box would be completed in order, so you can use the first box without waiting for all the bases to print, then for the first lid to print. You can mix and match","title":"Use Jobs to group your print files"},{"location":"getting-started/#start-the-queue","text":"Safety check! If you glossed over \"Configure the plugin\" above, read it now. Seriously. You can permanently damage your printer if you don't set up the correct GCODE instructions to a clear the bed and finish the queue. Supporting specific printer profiles is on the to-do list , but not yet available, so you'll have to do this on your own for now. The print queue won't start your prints just yet. To run the queue: Click the 'Continuous Print` tab (it may be hidden in the extra tabs fold-out on the right) Double check the order and count of your prints - set the count and order using the buttons and number box to the right of the queued print, and delete with the red X . Click Start Managing . The plugin will wait until your printer is ready to start a print, then it'll begin with the top of the queue and proceed until the bottom. Note that when it's time to clear the print bed or finish up, a temporary cp\\_\\*.gcode file will appear in your local files, and disappear when it completes. This is a change from older \"gcode injecting\" behavior that is necessary to support at-commands in the clearing and finish scripts.","title":"Start the queue"},{"location":"getting-started/#inspect-queue-items","text":"As the print queue is managed and prints complete, you can see the status of individual prints by clicking the small triangle to the left of any individual queue item. This opens a sub-panel showing individual print stats and results.","title":"Inspect queue items"},{"location":"getting-started/#stop-the-queue","text":"When all prints are finished, the plugin stops managing the queue and waits for you to start it again. If you need to stop early, click Stop Managing . Important The queue may not be managed any more, but any currently running print will continue printing unless you cancel it with the Cancel button.","title":"Stop the queue"},{"location":"getting-started/#clean-up-the-queue","text":"Click the triple-dot menu in the top right corner of the plugin tab for several convenient queue cleanup options. You can also remove individual queue items with the red X next to the item.","title":"Clean up the queue"},{"location":"getting-started/#troubleshooting","text":"If at any point you're stuck or see unexpected behavior or bugs, please file a bug report . Be sure to include system info and browser logs so the problem can be quickly diagnosed and fixed.","title":"Troubleshooting"}]}